8장 예외처리

	예외(에러)의 구분
		1. 문법 에러: 코드 작성 시 문법적 오류로 발생하는 에러
		2. 실행 에러: 
			1) 시스템 에러: 프로그래머의 의지와 상관없이 발생 
			2) 정상적으로 동작하는 프로그램에서 나타나는 mild한 에러

1절 예외 처리 필요성
	예외 발생 가능성에 대해 미리 예상하고, 안정성을 높이기 위해 그에 대한 예방적 처리를 프로그래밍

2절 try~except 구조
	기본 구조: 
		try:
    			예외 발생 가능 명령어
		except [예외타입 [as e]]:
			예외 타입 발생 시 수행 명령어
		[else:
			try절 수행하다 예외가 발생 안 되면 else절 수행
			try절 수행하다 예외가 발생하면 except절 수행, else절 미수행]
		[finally:
			try절에서 예외가 발생하든 안 하든 마지막에 수행]

3절 raise
	raise 예외타입
	 - 강제 예외 발생

4절 추상 클래스
	추상 클래스: 추상메서드가 1개 이상 포함된 클래스
	- 객체를 만들지 않음
	추상 메서드: 호출할 수 없는 메서드
	- 상속받은 클래스에서 재정의하도록 강요할 때
	python에서 추상메서드 @abstractmethod나 raise를 이용

5절 파일 정리 작업(with절 이용)
	with open('데이터경로', ['r], [encoding='utf-8']) as f:
	open() / close() 대체 가능 (close 누락 시 진입 불가 에러)
	- 진입/종료, 연결/해제, 열고/닫는 거의 모든 파이썬 객체에 사용
	- 리소스를 안전하게 사용하고, 사용 후 자동으로 정리하는 상황에 사용
	- 리소스 관리 부담을 줄여 주는 도구
